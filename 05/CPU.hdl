// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    Or(a = instruction[15], b = false, out = instructionC);
    And(a = instruction[12], b = instructionC, out = compA);
    And(a = instruction[11], b = instructionC, out = compZX);
    And(a = instruction[10], b = instructionC, out = compNX);
    And(a = instruction[9], b = instructionC, out = compZY);
    And(a = instruction[8], b = instructionC, out = compNY);
    And(a = instruction[7], b = instructionC, out = compF);
    And(a = instruction[6], b = instructionC, out = compNO);
    And(a = instruction[5], b = instructionC, out = destAReg);
    And(a = instruction[4], b = instructionC, out = destDReg);
    And(a = instruction[3], b = instructionC, out = destMEM, out = writeM);
    And(a = instruction[2], b = instructionC, out = jumpLT);
    And(a = instruction[1], b = instructionC, out = jumpEQ);
    And(a = instruction[0], b = instructionC, out = jumpGT);

    // Mux01
    Mux16(a = instruction, b = outALU, sel = instructionC, out = outMux01);

    // A Register
    Not(in = instructionC, out = instructionA);
    Or(a = instructionA, b = destAReg, out = loadAReg);
    ARegister(in = outMux01, load = loadAReg,
                out = outAReg, out[0..14] = addressM);

    // D Register
    DRegister(in = outALU, load = destDReg, out = outDReg);

    // Mux02
    Mux16(a = outAReg, b = inM, sel = compA, out = outMux02);

    // PC
    Not(in = outALUng, out = notOutALUng);
    Not(in = outALUzr, out = notOutALUzr);
    And(a = notOutALUng, b = notOutALUzr, out = outALUpg);
    And(a = outALUng, b = jumpLT, out = jump1);
    And(a = outALUpg, b = jumpGT, out = jump2);
    And(a = outALUzr, b = jumpEQ, out = jump3);
    Or8Way(in[0] = jump1, in[1] = jump2,
            in[2] = jump3, in[3..7] = false, out = loadPC);
    Not(in = loadPC, out = incPC);
    PC(in = outAReg, inc = incPC, load = loadPC, reset = reset , out[0..14] = pc);

    // ALU
    ALU(x = outDReg, y = outMux02, zx = compZX, nx = compNX,
        zy = compZY, ny = compNY, f = compF, no = compNO,
        out = outALU, out = outM, zr = outALUzr, ng = outALUng);
}
